<section class="center scrollable bg" >
  <div class="grey-bg" style="padding-left: 200px; padding-right: 200px; padding-top: 40px; margin-bottom: 80px;">
    <h1 class="page-title">Projects & Competitions</h1>

    <p class="plain-text" style="padding-bottom: 60px; font-size: 15px; font-family: 'Open Sans'; text-align: justify; text-justify: inter-word;">
      Here are some of the things I've worked on. Click anywhere on a card to open it up and check it out, and at bottom of the page you can read about some
      competitions I've participated in. If you're looking for a place to start, I'd recommend a project that's on a colored card. Those are the projects I'm most proud of!
    </p>
  </div>
  <div id="wrapper" class="loaded">
    <div id="content" class="column-format">
      <div id="card" class="card1">
        <div id="front" class="front1">
          <div id="top-pic" style="background-image: url('./lib/img/projects/slack2.png')"></div>
          <div id="info-box" style="background-color: #01C6D4">
            <div class="info">
              <h2 style="zoom: 130%; margin-bottom: 60px;">Slack Pizza App</h2>
              <h3 style="text-transform: none;">Slack Real Time Messaging API, Dominos Pizza API, Google Geocode API, Natural Language Processing, Express, Handlebars, MongoDB (JavaScript)</h3>
            </div>
          </div>
        </div>
        <div id="back" class="back1" style="padding-top: 130px;">
          <p style="color: black;">
            <form action="https://github.com/benhubsch/SlackPizza" target="_blank">
              <button class="github-button">View on Github</button>
            </form>
          </p>
        </div>
      </div>
      <div id="card" class="card2">
        <div id="front" class="front2">
          <div id="top-pic" style="background-image: url('./lib/img/projects/terminal3.png')"></div>
          <div id="info-box" style="background-color: #89d86c;">
            <div class="info">
              <h2 style="zoom: 130%; margin-bottom: 60px; color: white">Command Line File Finder</h2>
              <h3 style="text-transform: none; color: white">Click Library, setuptools (Python)</h3>
            </div>
          </div>
        </div>
        <div id="back" class="back2" style="padding-top: 130px;">
          <p style="color: black;">
            <form action="https://github.com/benhubsch/File-Finder" target="_blank">
              <button class="github-button">View on Github</button>
            </form>
          </p>
        </div>
      </div>
      <div id="card" class="card12">
        <div id="front" class="front12">
          <div id="top-pic" style="background-image: url('./lib/img/projects/interview.png')"></div>
          <div id="info-box" style="background-color: #3F82BF;">
            <div class="info">
              <h2 style="zoom: 130%; margin-bottom: 60px;">Interview Thing</h2>
              <h3 style="text-transform: none;">(Java)</h3>
            </div>
          </div>
        </div>
        <div id="back">
          <div class="back-info">
            <p style="color: black; padding-bottom: 80px;" class="back12">This was a lossless compression program I wrote by converting the bit contents of any file to a Huffman tree, which could be stored at a fraction of the space as the original, uncompressed file. It also implemented
              functionality to decompress any file that had been compressed.
            </p>
          </div>
          <form action="https://github.com/benhubsch/Huff">
            <button class="github-button">View on Github</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <div id="wrapper" class="loaded">
    <div id="content" class="column-format">
      <div id="card" class="card4">
        <div id="front" class="front4">
          <div id="top-pic" style="background-image: url('./lib/img/projects/reddit.png')"></div>
          <div id="info-box" style="background-color: #ED5529;">
            <div class="info">
              <h2 style="zoom: 130%; margin-bottom: 60px;">Reddit Translation Bot</h2>
              <h3 style="text-transform: none;">Reddit API, Google Translate API (Python)</h3>
            </div>
          </div>
        </div>
        <div id="back" class="back4" style="padding-top: 130px;">
          <p style="color: black;">
            <form action="https://github.com/benhubsch/Reddit-Translation-Bot" target="_blank">
              <button class="github-button">View on Github</button>
            </form>
          </p>
        </div>
      </div>
      <div id="card" class="card11">
        <div id="front" class="front11">
          <div id="top-pic" style="background-image: url('./lib/img/projects/atom.png')"></div>
          <div id="info-box" style="background-color: #50AB65">
            <div class="info">
              <h2 style="zoom: 130%; margin-bottom: 60px;">Atom Package</h2>
              <h3 style="text-transform: none;">(Java)</h3>
            </div>
          </div>
        </div>
        <div id="back">
          <div class="back-info">
            <p style="color: black; padding-bottom: 65px;" class="back11">I implemented this Sudoku Solver using a backtracking algorithm after being inspired by the N Queens problem in class. It struck me as such a useful algorithm and I wanted to become familiar with it. I ended up using
              a variation of this algorithm for a Google Code Jam problem about arranging horses of different mane colors in certain stalls.
            </p>
          </div>
          <form action="https://github.com/benhubsch/Sudoku">
            <button class="github-button">View on Github</button>
          </form>
        </div>
      </div>

        <div id="card" class="card3">
          <div id="front" class="front3">
            <div id="top-pic" style="background-image: url('./lib/img/projects/web.png')"></div>
            <div id="info-box" style="background-color: #72964A; opacity: 0.8">
              <div class="info">
                <h2 style="zoom: 130%; margin-bottom: 60px;">benhubsch.me</h2>
                <h3 style="text-transform: none;">HTML5, CSS3, JQuery, Express, Handlebars (JavaScript)</h3>
              </div>
            </div>
          </div>
          <div id="back" class="back3" style="padding-top: 130px;">
            <p style="color: black;">
              <form action="https://github.com/benhubsch/PersonalWebsite" target="_blank">
                <button class="github-button">View on Github</button>
              </form>
            </p>
          </div>
        </div>
      </div>
    </div>
    <div id="wrapper" class="loaded">
      <div id="content" class="column-format">
        <div id="card" class="card10">
          <div id="front" class="front10">
            <div id="top-pic" style="background-image: url('./lib/img/projects/huff.png')"></div>
            <div id="info-box" style="background-color: #ccc7c7;">
              <div class="info">
                <h2 style="zoom: 130%; margin-bottom: 60px;">Huffman Decompression</h2>
                <h3 style="text-transform: none;">(Java)</h3>
              </div>
            </div>
          </div>
          <div id="back">
            <div class="back-info">
              <p style="color: black; padding-bottom: 80px;" class="back10">This was a lossless compression program I wrote by converting the bit contents of any file to a Huffman tree, which could be stored at a fraction of the space as the original, uncompressed file. It also implemented
                functionality to decompress any file that had been compressed.
              </p>
            </div>
            <form action="https://github.com/benhubsch/Huff">
              <button class="github-button">View on Github</button>
            </form>
          </div>
        </div>
        <div id="card" class="card8">
          <div id="front" class="front8">
            <div id="top-pic" style="background-image: url('./lib/img/projects/cpu.png')"></div>
            <div id="info-box" style="background-color: #ccc7c7; opacity: 1">
              <div class="info">
                <h2 style="zoom: 130%; margin-bottom: 60px;">16-bit Processor</h2>
                <h3 style="text-transform: none;">(MIPS)</h3>
              </div>
            </div>
          </div>
          <div id="back" class="scrollable">
            <div class="back-info">
              <p style="color: black;" class="back8">This was as nitty gritty into hardware as I've ever gotten, and it was also unbelievably rewarding. I digitally implemented a processor able to execute some of the most common instructions in the MIPS instruction set.
                My processor implemented elements like an ALU, a register file, a memory store (IMEM and DMEM), a couple of input and output components, control, and a heck of a lot of wires. There's really no better way to understand the basics of how a computer executes instructions than <body>
                  by actually doing it, so I'm glad to have gone through the process. There were so many little details that could have gotten lost (and did get lost), but I also had a major rush of adrenaline when everything finally hummed along smoothly.
                </p>
              </div>
            </div>
          </div>
          <div id="card" class="card6">
            <div id="front" class="front6">
              <div id="top-pic" style="background-image: url('./lib/img/projects/express.png')"></div>
              <div id="info-box" style="background-color: #ccc7c7;">
                <div class="info">
                  <h2 style="zoom: 130%; margin-bottom: 60px; color: white">Express Framework Rebuilt</h2>
                  <h3 style="text-transform: none; color: white">(JavaScript)</h3>
                </div>
              </div>
            </div>
            <div id="back" class="scrollable">
              <div class="back-info">
                <p style="color: black;" class="back6">I rebuilt the basics of express.js (implementing methods like listen, get, post, send, render, use) to help myself understand how Express works behind the scenes. Before this project, I didn't feel like I understood middleware, routing, or internet protocols all that well, and now I do. I think it's fun to
                  peel away the black box that applications sometimes live in and really understand how they work and why they're written the way they are. When I started working on a function for my get method, I couldn't for the life of me figure out how
                  I was going to be able to execute the callback once all of the routes had been registered. Eventually I realized that I could just use an object and keep track of the routes and their respective callbacks when they were registered, which seems so obvious in retrospect.
                  Obviously Express is a super popular framework, but I think a lot of people (myself included) fall into a trap of treating some software like magic when it's not.
                </p>
              </div>
              <form action="https://github.com/benhubsch/Express-Rebuilt">
                <button class="github-button">View on Github</button>
              </form>
            </div>
          </div>
      </div>
    </div>
    <div id="wrapper" class="loaded">
      <div id="content" class="column-format">
        <div id="card" class="card9">
          <div id="front" class="front9">
            <div id="top-pic" style="background-image: url('./lib/img/projects/cache.png')"></div>
            <div id="info-box" style="background-color: #ccc7c7;">
              <div class="info">
                <h2 style="zoom: 130%; margin-bottom: 60px;">Cache Simulator</h2>
                <h3 style="text-transform: none;">(Java)</h3>
              </div>
            </div>
          </div>
          <div id="back" class="scrollable">
            <div class="back-info">
              <p style="color: black;" class="back9">I implemented a cache simulator in Java that takes as input the block size and the cache configuration, which includes the overall size of the cache in KB, the associativity, and whether the cache is writeback and write-allocate or writethrough and
                write-no-allocate. The replacement policy for this cache is LRU, which I implemented using Linked Lists. This allowed me to add new blocks to the front of the list when they were brought into the cache and removed blocks from the end of if and when the set became full.
                This was really good practice in understanding how computers can become more efficient and what tradeoffs an architect can make.
              </p>
            </div>
          </div>
        </div>
        <div id="card" class="card5">
          <div id="front" class="front5">
            <div id="top-pic" style="background-image: url('./lib/img/projects/sudoku.png')"></div>
            <div id="info-box" style="background-color: #ccc7c7">
              <div class="info">
                <h2 style="zoom: 130%; margin-bottom: 60px;">Sudoku Solver</h2>
                <h3 style="text-transform: none;">(Java)</h3>
              </div>
            </div>
          </div>
          <div id="back">
            <div class="back-info">
              <p style="color: black; padding-bottom: 65px;" class="back5">I implemented this Sudoku Solver using a backtracking algorithm after being inspired by the N Queens problem in class. It struck me as such a useful algorithm and I wanted to become familiar with it. I ended up using
                a variation of this algorithm for a Google Code Jam problem about arranging horses of different mane colors in certain stalls.
              </p>
            </div>
            <form action="https://github.com/benhubsch/Sudoku">
              <button class="github-button">View on Github</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    <div style="margin-top: 35px; padding-bottom: 35px;">
      <span class="ss-style-dots"></span> <span class="ss-style-dots"></span> <span class="ss-style-dots"></span>
    </div>
    <div style="padding-left: 150px; padding-right: 150px">
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>AngelHack Silicon Valley</u>
        <div style="font-size: 18px;">
          TBD
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Jane Street Electronic Trading Competition</u>
        <div style="font-size: 18px;">
          Competing in the Jane Street ETC was some of the most fun I've ever had programming. While I knew relatively little about financial markets and asset classes, the competition was more a test of a team's ability to continually iterate and improve on a trading algorithm
          over the course of twelve hours. My team ended up finishing in 2nd place, though the competition was a roller coaster. We started out in 7th place and at one point had dipped to as low as 23rd. I've already written substantially about
          my experience at Jane Street in a blog post <a href="https://www.espn.com" target="_blank">HERE</a>.
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Google Code Jam 2017</u>
        <div style="font-size: 18px;">
          I had never competed in an algorithm competition of any kind prior to Google Code Jam, and it got me so hooked on competitive programming that I'm planning on doing an independent study on competitive programming next semester. It was inspiring
          to see how quickly some people were able to solve problems and advance to next round &mdash; I want to get to the point in my career where problems presented by Code Jam in the early rounds are a breeze. I also do believe that competitive programming
          is a skill that can be developed, as I saw my performance across the rounds improve dramatically. You learn what parts of the problem to focus on, and when you should spend more time thinking about a solution that will scale versus writing a brute
          force to cash out on the smaller datasets. A friend and I would work side-by-side on the problems while competing and then grab a meal afterward and talk about our solutions and approaches to the problems, which was a valuable learning experience. Very much looking forward to competing next year again!
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Expedia DataFest@Duke</u>
        <div style="font-size: 18px;">
          For this datathon, we were given just about every bit of information you could possibly imagine collecting from Expedia's landing page and were told to do what we wanted with it. The real struggle was
          picking a question that whittled down the dataset to a manageable size and was simultaneously interesting. We decided to look at how income plays a role in travel destination spots. While we didn't have exact income data for Expedia users, we were able to use the billing
          zip code of the user and marry that information with government data that mapped zip codes to income. We extracted interesting information out of that dataset, and I had a lot of fun participating. We wrote everything in Python using pandas in Jupyter,
          and our visualization relied on matplotlib.
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Citadel Securities Datathon</u>
        <div style="font-size: 18px;">
          This datathon focused on the job market and economy in the United States post-recession in 2008 and was an interesting combination of computer science, statistics, and economics. My team had two economics majors and two computer science majors on
          our team, and we did our best to derive geographic and age insights from the data using regressions. We also made an attempt at a machine learning approach, but it admittedly was a failure. We ultimately didn't have enough good time-series data to
          both train our machine well and get legitimate results. Oh well, it happens!
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Horizons Hackathon</u>
        <div style="font-size: 18px;">
          I worked with two friends to build the Slack Pizza App that's I linked to in my projects section above. We'd already been working on the app prior to the hackathon and decided to continue working on it because we were learning so much and having such a
          blast. Since I explain the project in detail in the <a href="https://github.com/benhubsch/SlackPizza" target="_blank">README on Github</a>, I'll just briefly share a funny story. There was one point in the middle of the night around 1:30am when we were trying to place orders for pasta and pizza and were
          confused because it seemed like they weren't going through. Finally, we placed an order for a chicken alfredo pasta and got an email to confirm our order. We then drive to Dominos, and I tell them that I was there to pick up a pasta that I'd ordered.
          The lady behind the counter said, "Uhhh, I actually have FIVE orders of chicken alfredo pasta and one large pepperoni pizza that have all been paid for in your name." Needless to say, we had a debug session when we got back home... No more accidental quintupling of orders!
        </div>
      </div>
      <div style="font-size:25px; margin-bottom: 10px;">
        <u>Duke Catalyst HackerRank Month of Code</u>
        <div style="font-size: 18px;">
          This wasn't so much a strict competition as it was a fun way to encourage everyone to sharpen their programming skills outside of class. I made a point of trying to solve problems in a bunch of different languages to keep things fresh and learn about some langauges that
          I didn't yet have familiarity with. It also forced me to think about efficiency since I had submissions rejected a couple of times for being overly slow. At the end of the month, I ended up solving the greatest number of problems and had the highest score.
        </div>
      </div>
    </div>
    <script>
    $('.front1').click(function(){
      $(".card1").toggleClass('flip');
    });
    $('.back1').click(function(){
      $(".card1").toggleClass('flip');
    });
    $('.front2').click(function(){
      $(".card2").toggleClass('flip');
    });
    $('.back2').click(function(){
      $(".card2").toggleClass('flip');
    });
    $('.front3').click(function(){
      $(".card3").toggleClass('flip');
    });
    $('.back3').click(function(){
      $(".card3").toggleClass('flip');
    });
    $('.front4').click(function(){
      $(".card4").toggleClass('flip');
    });
    $('.back4').click(function(){
      $(".card4").toggleClass('flip');
    });
    $('.front8').click(function(){
      $(".card8").toggleClass('flip');
    });
    $('.back8').click(function(){
      $(".card8").toggleClass('flip');
    });
    $('.front6').click(function(){
      $(".card6").toggleClass('flip');
    });
    $('.back6').click(function(){
      $(".card6").toggleClass('flip');
    });
    $('.front9').click(function(){
      $(".card9").toggleClass('flip');
    });
    $('.back9').click(function(){
      $(".card9").toggleClass('flip');
    });
    $('.front5').click(function(){
      $(".card5").toggleClass('flip');
    });
    $('.back5').click(function(){
      $(".card5").toggleClass('flip');
    });
    $('.front10').click(function(){
      $(".card10").toggleClass('flip');
    });
    $('.back10').click(function(){
      $(".card10").toggleClass('flip');
    });
    $('.front11').click(function(){
      $(".card11").toggleClass('flip');
    });
    $('.back11').click(function(){
      $(".card11").toggleClass('flip');
    });
    $('.front12').click(function(){
      $(".card12").toggleClass('flip');
    });
    $('.back12').click(function(){
      $(".card12").toggleClass('flip');
    });
    </script>
  </section>